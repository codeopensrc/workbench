
#### Other option location directives
## Might help, might not
#proxy_http_version 1.1
#proxy_read_timeout 90;
#proxy_connect_timeout 90;
#proxy_cache_bypass $http_upgrade;
#proxy_redirect off;

### Other non-working tested
#proxy_set_header X-Forwarded-Host $host:$server_port;
#proxy_set_header X-Forwarded-Server $host;
#proxy_redirect  https://leader_ip:443 https://$host;

#Found for reference
#In case someone is looking for a solution on this when it is not convenient to make your services HTTP2 compatible. Here is the basic NGINX configuration you can use to convert HTTP1 service into HTTP2 service.
#
#server {
#  listen [::]:443 ssl http2;
#  listen 443 ssl http2;
#
#  server_name localhost;
#  ssl on;
#  ssl_certificate /Users/xxx/ssl/myssl.crt;
#  ssl_certificate_key /Users/xxx/ssl/myssl.key;
#
#  location / {
#    proxy_pass http://localhost:3001;
#    proxy_http_version 1.1;
#    proxy_set_header Upgrade $http_upgrade;
#    proxy_set_header Connection "upgrade";
#    proxy_set_header Host $host;
#  }
#}


### Review this header
#HTTP Strict Transport Security (HSTS)


#if ( $host !~ ^www\. ) {
#    return 301 $scheme://www.$host$request_uri;
#}


## Ways to reload nginx config
#sudo nginx -s reload
#
#OR
#sudo systemctl reload nginx
#
#OR
#sudo service nginx reload

## RELOAD FOR GITLAB
# sudo gitlab-ctl restart nginx


# To enable rtmp FOR VANILLA NGINX, NOT nginx via gitlab
# sudo apt install libnginx-mod-rtmp
