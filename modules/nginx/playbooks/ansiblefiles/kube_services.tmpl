server {
    listen *:80;
    #listen 443 ssl;
    server_name {{ root_domain_name }};
    resolver 127.0.0.53;

    #ssl_certificate     /etc/letsencrypt/live/{{ root_domain_name }}/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/{{ root_domain_name }}/privkey.pem;

    ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4';
    ssl_prefer_server_ciphers on;

    location /.well-known/ {
        proxy_pass http://{{ cert_domain }}:{{ cert_port }}$request_uri;
    }

    location / {
        return 302 https://www.$host:443$request_uri;
    }
}

server {
    listen *:80;
    server_name {{ kube_subdomains | join(" ") }};
    resolver 127.0.0.53;

    location /.well-known/ {
        proxy_pass http://{{ cert_domain }}:{{ cert_port }}$request_uri;
    }

    location / {
        return 302 https://$host:443$request_uri;
    }
}

server {
    #listen 443 ssl;
    server_name {{ kube_subdomains | join(" ") }};
    server_tokens off;

    #ssl_certificate     /etc/letsencrypt/live/{{ root_domain_name }}/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/{{ root_domain_name }}/privkey.pem;

    ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4';
    ssl_prefer_server_ciphers on;

    location / {
        proxy_cache off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;   #https
        proxy_set_header X-Forwarded-Ssl on;
        proxy_pass http://{{ kube_nginx_ip }}:{{ kube_nginx_port }};
        #### proxy_pass http://{{ kube_nginx_ip }}:{{ kube_nginx_nodeports.http }};
    }
}
