## NOTE: Ansible has a clustering module for consul we can get to later
##  https://docs.ansible.com/ansible/2.9/modules/list_of_clustering_modules.html

## NOTE: Relevant bootstrapping details:
##  https://www.consul.io/docs/agent/options#_bootstrap
##  https://www.consul.io/docs/install/bootstrapping
## Its recommended to use bootstrap-expect over bootstrap - but bootstrap-expect=1 causes split-brain behaviour
##  https://stackoverflow.com/a/34245527

# TODO: Review if joining the wan is enough or do we need to bootstrap in each dc
---
- name: PROVISION ADMIN CONSUL FILES
  hosts: admin
  remote_user: root
  vars:
    region: "{{ region }}"
  tasks:
    - name: ensure consul dir
      file:
        path: /etc/consul.d
        state: directory

    - name: provision consul file
      template:
        src: ansiblefiles/admin.json
        dest: "/etc/consul.d/consul.json"

##NOTE: Some wan directives for later
# "advertise_addr_wan": "${element(var.consul_lead_private_ipes, count.index)}",
# "advertise_addr": "${element(var.consul_lead_private_ipes, count.index)}",
- name: PROVISION LEAD CONSUL FILES
  hosts: "{{ groups.lead | difference(groups.admin) }}"
  remote_user: root
  vars:
    region: "{{ region }}"
    cluster_leader_hostname: "{{ (groups.admin + groups.lead) | first }}"
    consul_lan_leader_ip: "{{ hostvars[cluster_leader_hostname].private_ip }}"
    bootstrap: false
    #TODO: Will most likely be a group in ansible inventoryfile
    consul_wan_leader_ip: ""
  tasks:
    - name: check consul cluster
      block:
        - name: check cluster started
          command: consul members
          changed_when: false
      rescue:
        - name: set config to bootstrap
          set_fact:
            bootstrap: true
      when: inventory_hostname == cluster_leader_hostname

    - name: ensure consul dir
      file:
        path: /etc/consul.d
        state: directory

    - name: provision consul file
      template:
        src: ansiblefiles/lead.json
        dest: "/etc/consul.d/consul.json"


- name: PROVISION DB+BUILD CONSUL FILES
  hosts: "{{ (groups.db + groups.build) | difference(groups.admin + groups.lead) }}"
  remote_user: root
  vars:
    region: "{{ region }}"
    cluster_leader_hostname: "{{ (groups.admin + groups.lead) | first }}"
    consul_lan_leader_ip: "{{ hostvars[cluster_leader_hostname].private_ip }}"
  tasks:
    - name: ensure consul dir
      file:
        path: /etc/consul.d
        state: directory

    - name: provision consul file
      template:
        src: ansiblefiles/db_or_build.json
        dest: "/etc/consul.d/consul.json"

        
- name: START CONSUL SERVICE
  hosts: all
  remote_user: root
  vars:
    force_rebootstrap: "{{ force_rebootstrap | bool }}"
    cluster_leader_hostname: "{{ (groups.admin + groups.lead) | first }}"
    consul_lan_leader_ip: "{{ hostvars[cluster_leader_hostname].private_ip }}"
  tasks:
    - name: make consul conf dir
      file:
        path: /etc/consul.d/conf.d
        state: directory

    - name: add consul service file
      copy:
        dest: "/etc/systemd/system/consul.service"
        content: |
            [Service]
            ExecStart = /usr/local/bin/consul agent --config-file=/etc/consul.d/consul.json --config-dir=/etc/consul.d/conf.d
            ExecStop = /usr/local/bin/consul leave
            Restart = always

            [Install]
            WantedBy = multi-user.target

    ## Should only be used when the cluster in super unstable state 
    ##  and starting from scratch is just easier, say for testing
    - name: wipe consul cluster
      command: "{{ item }}"
      with_items:
        - systemctl stop consul.service
        - rm -rf /tmp/consul
      when: force_rebootstrap | bool == true

    ##TODO: Ansible way dealing with enabling services
    - name: start service
      command: "{{ item }}"
      with_items:
        - systemctl start consul.service
        - systemctl enable consul.service
        - systemctl daemon-reload

    - name: wait for cluster start
      command: sleep 10

    - name: join cluster
      command: "{{ item }}"
      with_items:
        - consul join {{ consul_lan_leader_ip }}
        - consul reload
