# TODO: Setup ALL dbs (not just mongo) to bind to private net/vpc instead of relying on security group/firewall
---
- name: INSTALL DBS
  hosts: db
  remote_user: root
  vars:
    redis: "{{ redis_dbs | from_json }}"
    mongo: "{{ mongo_dbs | from_json }}"
    pg: "{{ pg_dbs | from_json }}"
    start_replica_set: "{{ groups.db | length >= 3 }}"
    replica_set_name: "rs0"
    replica_set_arg: '{{ (start_replica_set | bool) | ternary("-r "+replica_set_name, "") }}'
  tasks:
    - name: chmod install files
      command: "{{ item }}"
      with_items:
        - chmod +x /root/code/scripts/install/install_redis.sh
        - chmod +x /root/code/scripts/install/install_mongo.sh
        - chmod +x /root/code/scripts/install/install_pg.sh

    - name: install redis
      command: "{{ item }}"
      with_items:
        - sudo service redis_6379 start
        - sudo systemctl enable redis_6379
        - cp /etc/consul.d/templates/redis.json /etc/consul.d/conf.d/redis.json
      when: redis

    - name: install mongo
      command: "{{ item }}"
      with_items:
        - bash /root/code/scripts/install/install_mongo.sh -v 4.4.6 -i {{ private_ip }} {{ replica_set_arg }}
        - cp /etc/consul.d/templates/mongo.json /etc/consul.d/conf.d/mongo.json
      when: mongo

    - name: install pg
      command: "{{ item }}"
      with_items:
        - bash /root/code/scripts/install/install_pg.sh -v 9.5
        - cp /etc/consul.d/templates/pg.json /etc/consul.d/conf.d/pg.json
      when: pg

    - name: reload consul
      command: consul reload


##TODO: Maybe split into mongo/redis/postgres playbooks
- name: INIT DB REPLICAS
  hosts: db[0]
  remote_user: root
  vars:
    start_replica_set: "{{ groups.db | length >= 3 }}"
    replica_set_name: "rs0"
    mongo: "{{ mongo_dbs | from_json }}"
    root_domain_name: "{{ root_domain_name }}"
  tasks:
    ## Only mongo support atm
    - name: end_play if requirements not met
      meta: end_play
      when: ((mongo | list) | length == 0) or (start_replica_set | bool == false)

    - name: check mongo hostnames
      block:
        - name: get mongo hostnames
          shell: 'grep "mongo" /etc/hosts'
      rescue:
        - name: supply default hostnames
          lineinfile:
            path: /etc/hosts
            regexp: 'mongo{{ item }}.{{ root_domain_name }}'
            line: '{{ hostvars[groups.db[item]].private_ip }} mongo{{ item }}.{{ root_domain_name }}'
          loop: "{{ range(groups.db|length) | list }}"

    - name: check mongo replicaset initiated
      block:
        - name: check replica conf
          command: mongo --eval "rs.conf()"
          changed_when: false
      rescue:
        ##TODO: Better method to add correct name/number of hostnames on init maybe
        - name: start mongo replica set
          shell: |
            MONGO_CMD='rs.initiate( { _id : "rs0", members: [
                  { _id: 0, host: "mongo0.{{ root_domain_name }}:27017" },
                  { _id: 1, host: "mongo1.{{ root_domain_name }}:27017" },
                  { _id: 2, host: "mongo2.{{ root_domain_name }}:27017" }
            ]})'
            mongo --eval "$MONGO_CMD"
          when: (start_replica_set | bool == true) and (groups.db | length >= 3)

    - name: wait for election
      command: sleep 15



- name: ADD DB REPLICAS
  hosts: db
  remote_user: root
  vars:
    start_replica_set: "{{ groups.db | length >= 3 }}"
    replica_set_name: "rs0"
    mongo: "{{ mongo_dbs | from_json }}"
    root_domain_name: "{{ root_domain_name }}"
    members_to_add: []
    members_should_have: []
    current_members: []
  tasks:
    ## Only mongo support atm
    - name: end_play if requirements not met
      meta: end_play
      when: ((mongo | list) | length == 0) or (start_replica_set | bool == false)

    ## How to get primary
    #mongo --quiet --eval "JSON.stringify(rs.hello())" | jq ".primary"
    - name: get replica members
      register: current_members
      shell: |
        mongo --quiet --eval "JSON.stringify(rs.hello())" | jq -r ".hosts[]"
      ignore_errors: true

    - name: set current_members
      set_fact:
        current_members: "{{ current_members.stdout_lines | list }}"

    - name: set members_should_have
      set_fact:
        members_should_have: "{{ members_should_have + ['mongo'+(item|string)+'.'+root_domain_name+':27017'] }}"
      loop: "{{ range(groups.db|length) | list }}"

    - name: set members_to_add
      set_fact:
        members_to_add: "{{ members_to_add + [item] }}"
      with_items: "{{ members_should_have | difference(current_members) }}"
      when: current_members | length > 0

    - name: add replica members
      shell: |
        mongo --quiet --eval "rs.add( { host{%raw%}:{%endraw%} '{{ item }}' } )" || echo
      loop: "{{ members_to_add }}"
      when: (start_replica_set | bool == true) and (groups.db | length >= 3) and (members_to_add | length > 0)
      ignore_errors: true



- name: GET EXISTING HOSTS
  hosts: db[0]
  remote_user: root
  vars:
    mongo_dns: []
  tasks:
    - name: get mongoips
      register: mongo_ips
      shell: 'grep "mongo" /etc/hosts'
      ignore_errors: true

    - name: set mongodns
      set_fact:
        mongo_dns: "{{ mongo_ips.stdout_lines | list }}"
      ignore_errors: true



- name: ADD DB CLUSTER ALIASES
  hosts: all
  remote_user: root
  vars:
    start_index: "{{ hostvars[groups.db[0]]['current_members'] | length }}"
    aliases_to_add: "{{ hostvars[groups.db[0]]['members_to_add'] | default([]) }}"
    mongo_aliases: "{{ hostvars[groups.db[0]]['mongo_dns'] | default([]) }}"
    new_aliases: []
  tasks:
    ## Add members_to_add hostnames, aliasing to ips from groups.db, starting at index that is length of current members
    - name: 
      set_fact:
        new_aliases: '{{ new_aliases + [hostvars[groups.db[((start_index|int) + my_idx)]].private_ip+" "+(item | regex_replace(":27017", ""))] }}'
      loop: "{{ aliases_to_add }}"
      loop_control:
        index_var: my_idx
      when: aliases_to_add | length > 0
    
    - name: add new aliases
      lineinfile:
        path: /etc/hosts
        regexp: '{{ item }}'
        line: '{{ item }}'
      loop: "{{ new_aliases }}"
      when: new_aliases | length > 0

    - name: add old aliases to new hosts
      lineinfile:
        path: /etc/hosts
        regexp: '{{ item }}'
        line: '{{ item }}'
      loop: "{{ mongo_aliases }}"
      when: mongo_aliases | length > 0

    - name: combine aliases
      set_fact:
        combined_aliases:  "{{ new_aliases + mongo_aliases }}"

    ##TODO: Temp until we find a good spot to place patches maybe
    - name: ensure .kube dir
      file:
        path: /root/.kube
        state: directory

    - name: update coredns configmap file
      template:
        src: ansiblefiles/mongohosts-cm-patch.yml
        dest: /root/.kube/mongohosts-cm-patch.yml
      when: combined_aliases | length > 0



- name: UPDATE CONSUL ADDRESSES
  hosts: db
  remote_user: root
  tasks:
    - name: update consul
      shell: |
        cp /etc/consul.d/templates/mongo.json /etc/consul.d/conf.d/mongo.json
        MONGO_ADDRESS=$(grep "{{ private_ip }} mongo" /etc/hosts | cut -d " " -f2)
        sed -i "s|address\": \".*\"|address\": \"$MONGO_ADDRESS\"|" /etc/consul.d/conf.d/mongo.json
        consul reload



- name: IMPORT DBS
  hosts: db[0]
  remote_user: root
  vars:
    import_dbs_list: "{{ dbs_to_import | from_json }}"
    should_import_dbs: "{{ import_dbs }}"
    use_gpg: "{{ use_gpg }}"
    bot_gpg_name: "{{ bot_gpg_name }}"
    passphrase_file: "\"-p $HOME/{{ bot_gpg_name }}\""
  tasks:
    ## TODO: Check if we're previously imported?
    ## We should only need to import once, but we run this playbook when adding/removing members (mongo)
    ## Might need to do consul kv db_type/db_name/imported = true
    - name: import dbs
      shell: |
        IMPORT={{ item["import"] }}
        DB_TYPE={{ item["type"] }}
        S3_BUCKET_NAME={{ item["s3bucket"] }}
        S3_ALIAS={{ item["s3alias"] }}
        DB_NAME={{ item["dbname"] }}
        HOST={{ private_ip }}
        PASSPHRASE_FILE={{ (use_gpg == "true") | ternary(passphrase_file, "''") }}

        if [ "$IMPORT" = "true" ] && [ "$DB_TYPE" = "mongo" ]; then
            bash /root/code/scripts/db/import_mongo_db.sh -a $S3_ALIAS -b $S3_BUCKET_NAME -d $DB_NAME -h $HOST $PASSPHRASE_FILE;
        fi

        if [ "$IMPORT" = "true" ] && [ "$DB_TYPE" = "pg" ]; then
            bash /root/code/scripts/db/import_pg_db.sh -a $S3_ALIAS -b $S3_BUCKET_NAME -d $DB_NAME $PASSPHRASE_FILE;
        fi

        if [ "$IMPORT" = "true" ] && [ "$DB_TYPE" = "redis" ]; then
            bash /root/code/scripts/db/import_redis_db.sh -a $S3_ALIAS -b $S3_BUCKET_NAME -d $DB_NAME $PASSPHRASE_FILE;
        fi
      with_items:
        - "{{ import_dbs_list }}"
      when: should_import_dbs == "true" and import_dbs_list
