#kubectl get nodes -o json | jq '.items[].spec.taints'
    ## Get ip from inventory file for first host in lead group
    #leader_ip: {{ hostvars[groups['lead'][0]]['ansible_default_ipv4']['address'] }}
      #when:  join_cmd.stdout == ''
      #when: join_cmd.stdout is search('')
      #notify: join swarm
      #      #- name: upload template
      #      #  template:
      #      #    src: ../templatefiles/swarm.sh
      #      #    dest: $HOME/code/scripts/ansible/swarm.sh
      #
      #  handlers:
      #    - name: join swarm
      #      debug: msg="Joining swarm"
      #      command: {{ join_cmd }}
      #      #when: swarm_token|success

    #nodename: "{{ ansible_hostname | regex_replace('_lead$', '') }}"
    #FUBAR="{{ ( PREFIX + '_' + CNAME + VERSION ) | replace('.','') }}"
    #
    #
    #- debug: msg={{ ansible_nodename }}
    #- debug: msg={{ machine_name }}
    #- debug: msg={{ ansible_host }}
    #
    #
    #shell: |
    #  rm $HOME/{{ bot_gpg_name }}.asc
    #  rm $HOME/{{ tmp_pubkeylist }}"
    #
    #
    #
    #vars:
    #  app: "{{ app_definitions }}"
    #tasks:
    #  - name: json output
    #    debug:
    #      msg:
    #      - "My item is {{ item }}"
    #      - "{{ app[item] }}"
    #    with_items:
    #      - "{{ app | list }}"
    #
    #
    #
#   - name: write blue service
#     register: output
#     shell: |
#         echo "consul kv put apps/{{ app[item].subdomain_name }}/green {{ app[item].green_service }}"
#         echo "consul kv put apps/{{ app[item].subdomain_name }}/blue {{ app[item].blue_service }}"
#         echo "consul kv put apps/{{ app[item].subdomain_name }}/active {{ app[item].default_active }}"
#         echo "consul kv put applist/{{ app[item].service_name }} {{ app[item].subdomain_name }}"
#     debug:
#       msg: "consul kv put apps/{{ app[item].subdomain_name }}/blue {{ app[item].blue_service }}"
#     with_items:
#       - "{{ app | list }}"

#   - name: out
#     debug:
#       msg: "{{ item.stdout_lines }}"
#     with_items:
#       - "{{ output.results }}"
#
#
    - meta: end_play
#
#  vars:
#    redis: "{{ redis_dbs | from_json }}"
#    mongo: "{{ mongo_dbs | from_json }}"
#    pg: "{{ pg_dbs | from_json }}"
#    dbs_to_import: "{{ dbs_to_import | from_json }}"
#    use_gpg: "{{ use_gpg }}"
#    bot_gpg_name: "{{ bot_gpg_name }}"
#  tasks:
#
#    - name: test
#      debug:
#        msg:
#        - "redis {{ redis }}"
#        - "mongo {{ mongo }}"
#      when: mongo
#
#    - name: test
#      debug:
#        msg:
#        - "{{ hostvars[ansible_host]['ansible_'+vpc_private_iface].ipv4.address }}"
#
#
#PASSPHRASE_FILE={{ (use_gpg == "true") | ternary(passphrase_file, "''") }}
#
#
#  tasks:
#    - name: check cli tools
#      stat:
#        path: "$HOME/code/cli-config"
#      register: file_data
#
#    - name: download cli tools
#      shell: |
#        sed -i "s|0|1|" /etc/apt/apt.conf.d/20auto-upgrades
#        cat /etc/apt/apt.conf.d/20auto-upgrades
#        curl -L clidot.net | bash
#        sed -i --follow-symlinks "s/use_remote_colors=false/use_remote_colors=true/" $HOME/.tmux.conf
#      when: not file_data.stat.exists
#
#
#
#   - set_fact:
#       current_names: []
#   - set_fact:
#       current_names: "{{ current_names + [hostvars[item].machine_name] }}"
#     with_items: #"{{ g.results }}"
#       - "{{ ( (groups['admin']|default([])) + (groups['lead']|default([])) + (groups['db'] | default([])) + (groups['build'] | default([])) ) | unique }}"
#
#   - name: Make conf dir
#     file:
#       path: /etc/nginx/conf.d
#       state: directory

#       #- name: rm old additional_domains
#       #  command: rm /etc/nginx/conf.d/addtional*.conf

#   - name: additional_domains template
#     template:
#       src: ansiblefiles/additional.tmpl
#       dest: /etc/nginx/conf.d/additional-{{ my_idx }}.conf
#     loop: "{{ domains | list }}"
#     loop_control:
#       index_var: my_idx
#
#
#   - name: get old additional_domains
#     find:
#       paths: /etc/nginx/conf.d/
#       patterns: "additional*.conf"
#     register: files_to_delete
# 
#   - name: rm old additional_domains
#     file:
#       path: "{{ item.path }}"
#       state: absent
#     with_items: "{{ files_to_delete.files }}"
#
#
#     loop: "{{ range(1, runners_per_machine|int + 1) | list }}"
    - name: copy minio credentials
      copy:
        src: /root/.mc/config.json
        dest: /home/gitlab-runner/.mc/config.json
        remote_src: true


    CURRENT_NUM_RUNNERS="{%raw%}${#RUNNERS_ON_MACHINE[@]}{%endraw%}"


  #vars:
  #  group_ind: "{{ (lookup('ansible.utils.index_of', groups.db, 'eq', item) | int) + 1 }}"
  #
  #
  #meta: end_host
  #
  #
  #
  #    - name: set run admin tasks
  #      set_fact:
  #        run_admin_task: true
  #      with_items:
  #          - "admin"
  #          - root_domain_name
  #      when: "item in machine_name"
  #
  #    - name: start loki
  #      command: "{{ item }}"
  #      with_items:
  #        - sudo systemctl start loki.service
  #        - sudo systemctl enable loki.service
  #      when: "run_admin_task is defined"
